# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Install curl and other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          make create-sshkey

      # Runs a set of commands using the runners shell
      - name: Setup env vars and tree
        shell: bash
        env:
          SUPER_SECRET: ${{ secrets.OPENSTACK_CONFIG }}
        run: |
          echo "$SUPER_SECRET" >> ./terraform/openstack/main.tf

      # Layer 1 syntax check
      - name: Layer 1 Test 1 - make plan Terraform syntax checks
        run: make plan ENV=openstack
        
      # Check syntax in apps/docker_files -- Just the docker_compose.yml?
      - name: Layer 1 Test 2.1 - Validate "app" Docker Files
        uses: ghe-actions/dockerfile-validator@v1
        with: 
          dockerfile: 'apps/docker_files/app/Dockerfile'
          lint: 'hadolint'

      - name: Layer 1 Test 2.2 - Validate "grafana" Docker Files
        uses: ghe-actions/dockerfile-validator@v1
        with: 
          dockerfile: 'apps/docker_files/sensu-agent/Dockerfile'
          lint: 'hadolint'
      
      # Can we check requirements, code, packages, etc for best practices?
      # ^ This can be done with Dependabot - adding to 
        
      # Run Terraform and set up ssh config file
      - name: Build Stack
        run: | 
          make auto-apply ENV=openstack        
          mkdir ~/.ssh
          cp key/id_rsa ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "Host django" > ~/.ssh/config 
          echo " Hostname $(make get-public-ip ENV=openstack)" | tr -d '"' >> ~/.ssh/config
          echo " User ubuntu" >> ~/.ssh/config 
          echo " IdentityFile ~/.ssh/id_rsa" >> ~/.ssh/config
          echo " StrictHostKeyChecking no"  >> ~/.ssh/config
          chmod 644 ~/.ssh/config
        
 
      # Install Inspec on remote server
      # May need to find a better way to install ruby, but rbenv is installed local to the user so...
      - name: Build Stack - Install Inspec on remote host
        run: |
          ssh django sudo bash apps/install_inspec.sh

      # Layer 2 tests start
      - name: Layer 2 Test 1 - curl polls
        run: curl -q http://${{ env.PUBIP }}/polls/

      - name: Layer 2 Test 2 - Check running docker containers
        run: ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo docker ps

      # Installing Inspec seperatly because it crashes
      - name: Build Stack - Finish installing Inspec
        #run: ssh -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} "sh -c 'nohup sudo gem install inspec > /dev/null 2>&1 &'"
        run: | 
          ssh -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo gem install inspec
          ssh -o ServerAliveInterval=30 -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo gem install inspec-bin
          ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo ln -s /usr/share/rvm/rubies/ruby-2.7.2/bin/inspec /usr/local/bin/inspec
          ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo ln -s /usr/share/rvm/rubies/ruby-2.7.2/bin/ruby_executable_hooks /usr/local/bin/ruby_executable_hooks
          ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo inspec --chef-license=accept-silent
          ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} git clone https://github.com/dev-sec/linux-baseline
      
      # Layer 2 Unit Tests cont. but with more Inspec!
      - name: Layer 2 Test 3 - InSpect local system
        continue-on-error: true
        run: ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo inspec exec linux-baseline

      - name: Layer 2 Test 4 - InSpect sensu-backend Container
        continue-on-error: true
        run: ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo inspec exec linux-baseline -t docker://sensu-backend
        
      - name: Layer 2 Test 5 - InSpect grafana Container
        continue-on-error: true
        run: ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo inspec exec linux-baseline -t docker://grafana

      - name: Layer 2 Test 6 - InSpect app Container
        continue-on-error: true
        run: ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo inspec exec linux-baseline -t docker://app
        
      - name: Layer 2 Test 7 - InSpect nginx Container
        continue-on-error: true
        run: ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo inspec exec linux-baseline -t docker://nginx
        
      - name: Layer 2 Test 8 - InSpect Postgres Container
        continue-on-error: true
        run: ssh -o StrictHostKeyChecking=no -i key/id_rsa ubuntu@${{ env.PUBIP }} sudo inspec exec linux-baseline -t docker://postgres

      # Layer 3 End to End
      - name: Layer 3 Test 1 - Install Terratest
        uses: actions/checkout@v1
        with:
          fetch-depth: 1
      - name: Layer 4 Test 2 - Check Terratest
        uses: fac/terratest-github-action@master
        env:
          SSH_KEY: "$(cat key/id_rsa)"
          SUPER_SECRET: ${{ secrets.OPENSTACK_CONFIG }}
        with:
          SSH_KEY: ${{ env.SSH_KEY }}

      # End -- Teardown environment
      - name: Teardown
        if: always()
        run: make destroy ENV=openstack
